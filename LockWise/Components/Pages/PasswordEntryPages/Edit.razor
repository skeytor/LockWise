@page "/passwordentries/edit"
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@using LockWise.Data.Models
@using System.Security.Cryptography
@inject IDbContextFactory<LockWise.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>PasswordEntry</h2>
<hr />
@if (PasswordEntry is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="PasswordEntry" OnValidSubmit="UpdatePasswordEntry" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="PasswordEntry.Id" value="@PasswordEntry.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="PasswordEntry.Name" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => PasswordEntry.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="username" class="form-label">UserName:</label>
                    <InputText id="username" @bind-Value="PasswordEntry.UserName" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => PasswordEntry.UserName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="encryptedpassword" class="form-label">Password:</label>
                    <div class="input-group">
                        <InputText id="encryptedpassword"
                                   type="@passwordInputType"
                                   @bind-Value="PasswordEntry.EncryptedPassword"
                                   class="form-control"
                                   aria-required="true" />
                        <button type="button"
                                class="btn btn-outline-secondary"
                                @onclick="TogglePasswordVisibility"
                                aria-label="@toggleAriaLabel">
                            <span aria-hidden="true">@passwordEyeIcon</span>
                        </button>
                        <button type="button"
                                class="btn btn-outline-secondary"
                                @onclick="GeneratePassword"
                                aria-label="Generate strong password">
                            Generate
                        </button>
                    </div>
                    <ValidationMessage For="() => PasswordEntry.EncryptedPassword" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="website" class="form-label">Website:</label>
                    <InputText id="website" @bind-Value="PasswordEntry.Website" class="form-control" />
                    <ValidationMessage For="() => PasswordEntry.Website" class="text-danger" />
                </div>
                <div class="mb-3">
                    <InputSelect id="folder" @bind-Value="PasswordEntry.FolderId" class="form-select">
                        <option value="">-- Select Folder --</option>
                        @if (folders != null)
                        {
                            @foreach (var folder in folders)
                            {
                                <option value="@folder.Id">@folder.Name</option>
                            }
                        }
                    </InputSelect>
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/passwordentries">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private PasswordEntry? PasswordEntry { get; set; }
    private List<Folder>? folders;
    private string passwordInputType = "password";
    private string toggleAriaLabel => passwordInputType == "password" ? "Show password" : "Hide password";
    private string passwordEyeIcon => passwordInputType == "password" ? "👁" : "🙈";

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        PasswordEntry ??= await context.PasswordEntry.FirstOrDefaultAsync(m => m.Id == Id);
        folders = await context.Folder.ToListAsync();
        if (PasswordEntry is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdatePasswordEntry()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(PasswordEntry!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!PasswordEntryExists(PasswordEntry!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/passwordentries");
    }

    private bool PasswordEntryExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.PasswordEntry.Any(e => e.Id == id);
    }
    private void TogglePasswordVisibility()
    {
        passwordInputType = passwordInputType == "password" ? "text" : "password";
    }

    private void GeneratePassword()
    {
        PasswordEntry.EncryptedPassword = GenerateStrongPassword(16);
    }

    private static string GenerateStrongPassword(int length)
    {
        if (length < 4) length = 4;

        const string upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        const string lower = "abcdefghijklmnopqrstuvwxyz";
        const string digits = "0123456789";
        const string symbols = "!@#$%^&*()-_=+[]{};:,.?/\\|";

        var all = upper + lower + digits + symbols;
        var result = new char[length];

        result[0] = upper[RandomNumberGenerator.GetInt32(upper.Length)];
        result[1] = lower[RandomNumberGenerator.GetInt32(lower.Length)];
        result[2] = digits[RandomNumberGenerator.GetInt32(digits.Length)];
        result[3] = symbols[RandomNumberGenerator.GetInt32(symbols.Length)];

        for (int i = 4; i < length; i++)
        {
            result[i] = all[RandomNumberGenerator.GetInt32(all.Length)];
        }

        for (int i = result.Length - 1; i > 0; i--)
        {
            int j = RandomNumberGenerator.GetInt32(i + 1);
            (result[i], result[j]) = (result[j], result[i]);
        }

        return new string(result);
    }
}
